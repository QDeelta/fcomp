rec fn filter f l =
  match l with
  | Nil -> Nil
  | Cons h t ->
      let rest = filter f t in
        match f h with
        | True  -> Cons h rest
        | False -> rest

rec fn take n l =
  match l with
  | Nil -> Nil
  | Cons h t ->
      match eq 0 n with
      | True  -> Nil
      | False -> Cons h (take (sub n 1) t)

val primes =
  let rec from n =
    Cons n (from (add 1 n))
  with sieve l =
    match l with
    | Nil -> Nil
    | Cons p rest ->
        Cons p (sieve (filter (\n -> ne 0 (rem n p)) rest))
  in
    sieve (from 2)

fn start n = take n primes