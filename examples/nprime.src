ifte b x y = case b of
  { True  -> x
  ; False -> y
  };

filter f l = case l of
  { Nil -> Nil
  ; Cons h t ->
      let { rest = filter f t } in
        ifte (f h) (Cons h rest) rest
  };

take n l = case l of
  { Nil -> Nil
  ; Cons h t -> ifte (eq 0 n) Nil (Cons h (take (sub n 1) t))
  };

primes =
  let
  { from n = Cons n (from (add 1 n))
  ; sieve l =
      case l of
      { Nil -> Nil
      ; Cons p rest ->
          Cons p (sieve (filter (\n -> ne 0 (rem n p)) rest))
      }
  } in
  sieve (from 2);

start n = take n primes