rec fn foldl f x l =
  match l with
  | Nil -> x
  | Cons h t -> foldl f (f x h) t

rec fn foldr f x l =
  match l with
  | Nil -> x
  | Cons h t -> f h (foldr f x t)

rec fn map f l =
  match l with
  | Nil -> Nil
  | Cons h t -> Cons (f h) (map f t)

rec fn filter f l =
  match l with
  | Nil -> Nil
  | Cons h t ->
      let rest = filter f t in
        match f h with
        | True  -> Cons h rest
        | False -> rest

rec fn length l =
  match l with
  | Nil -> 0
  | Cons h t -> add 1 (length t)

rec fn append l1 l2 =
  match l1 with
  | Nil -> l2
  | Cons h t -> Cons h (append t l2)

fn concat = foldr append Nil

fn concatMap f l = concat (map f l)

rec fn fromTo m n =
  match gt m n with
  | True  -> Nil
  | False -> Cons m (fromTo (add m 1) n)

fn queens n =
  let rec loop boards counter =
    match eq counter n with
    | True  -> boards
    | False -> loop (concatMap expand boards) (add counter 1)
  with expand board =
    map
      (\x -> Cons x board)
      (filter (\x -> safe x board 1) (fromTo 1 n))
  with safe x l n =
    match l with
    | Nil -> True
    | Cons c y ->
        and (ne x c) (and (ne x (add c n)) (and (ne x (sub c n)) (safe x y (add n 1))))
  in
    loop (Cons Nil Nil) 0

fn start n = concat (queens n)