rec fn take n l =
  match l with
  | Nil -> Nil
  | Cons h t ->
      match eq 0 n with
      | True  -> Nil
      | False -> Cons h (take (sub n 1) t)

rec fn zipWith f l1 l2 =
  match l1 with
  | Cons h1 t1 ->
      match l2 with
      | Nil -> Nil
      | Cons h2 t2 -> Cons (f h1 h2) (zipWith f t1 t2)
      end
  | Nil -> Nil

fn tail l =
  match l with
  | Nil -> Nil
  | Cons h t -> t

rec val fibs = Cons 1 (Cons 1 (zipWith add fibs (tail fibs)))

fn start n = take n fibs