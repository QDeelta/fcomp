(: map (-> (-> Int Int) List List))
(def (map f l)
  (case l
    (Nil Nil)
    ((Cons h t) (Cons (f h) t))))

(: head (-> List Int))
(def (head l)
  (case l
    (Nil 0)
    ((Cons h t) h)))

(: from (-> Int List))
(def (from n) (Cons n (from (+ 1 n))))

(: main (-> Int List))
(def (main n) 
  (Cons (head (map (+ 2) (from 1))) Nil))

