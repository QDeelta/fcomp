ifte b x y =
  case b of
  { True  -> x
  ; False -> y
  };

take n l =
  ifte
    (le n 0)
    Nil
    (case l of
      { Nil -> Nil
      ; Cons h t -> take (sub n 1) t
      });

map f l =
  case l of
  { Nil -> Nil
  ; Cons h t -> Cons (f h) (map f t)
  };

nats = Cons 0 (map (add 1) nats);

isEven n = eq 0 (rem n 2);

b2i b = ifte b 1 0;

start n = take n (map b2i (map isEven nats))
