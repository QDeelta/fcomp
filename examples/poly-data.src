data Pair a b = Pair a b;

ifte b x y = case b of
  { True  -> x
  ; False -> y
  };

fst p = case p of { Pair x y -> x };
snd p = case p of { Pair x y -> y };

zip = zipWith Pair;

addP p = case p of { Pair x y -> add x y };

zipWith f l1 l2 = 
  case l1 of
    { Nil -> Nil
    ; Cons h1 t1 -> case l2 of
        { Nil -> Nil
        ; Cons h2 t2 -> Cons (f h1 h2) (zipWith f t1 t2)
        }
    };

map f l = 
  case l of
    { Nil -> Nil
    ; Cons h t -> Cons (f h) (map f t)
    };

take n l = 
  case l of
    { Nil -> Nil
    ; Cons h t -> 
        ifte (eq 0 n) Nil (Cons h (take (sub n 1) t))
    };

nats = Cons 0 (map (add 1) nats);

start n = take n (map addP (zip nats nats));
