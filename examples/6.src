(: ife (-> Bool List List List))
(def (ife b x y)
  (case b
    (False y)
    (True  x)))

(: from (-> Int List))
(def (from n) (Cons n (from (+ 1 n))))

(: notDivide (-> Int Int Bool))
(def (notDivide p n) (not (=? 0 (rem n p))))

(: filter (-> (-> Int Bool) List List))
(def (filter f l)
  (case l
    (Nil Nil)
    ((Cons h t) (ife (f h) (Cons h (filter f t)) (filter f t)))))

(: sieve (-> List List))
(def (sieve l)
  (case l
    (Nil Nil)
    ((Cons p rest) (Cons p (sieve (filter (notDivide p) rest))))))

(: primes List)
(def primes (sieve (from 2)))

(: head (-> List Int))
(def (head l)
  (case l
    (Nil 0)
    ((Cons h t) h)))

(: tail (-> List List))
(def (tail l)
  (case l
    (Nil Nil)
    ((Cons h t) t)))

(: take (-> Int List List))
(def (take n l)
  (ife (=? 0 n) Nil (Cons (head l) (take (- n 1) (tail l)))))

(: main (-> Int List))
(def (main n) (take n primes))
