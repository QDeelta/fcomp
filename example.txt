(data Nat O (S Nat))

(: plus (-> Nat Nat Nat))
(def (plus m n)
  (case m
    (O n)
    ((S m') (plus m' n))))

(data NatList Nil (Cons Nat NatList))

(: len (-> NatList Nat))
(def (len l)
  (case l
    (Nil O)
    ((Cons h t) (S (len t)))))

(: concat (-> NatList NatList NatList))
(def (concat l1 l2)
  (case l1
    (Nil l2)
    ((Cons h t) (Cons h (concat t l2)))))

(: one Nat)
(def one (S O))

(: two Nat)
(def two (S (S O)))

(: three Nat)
(def three (S (S (S O))))

(: main Nat)
(def main 
  (len 
    (concat 
      (Cons O (Cons one Nil)) 
      (Cons (plus two one) Nil))))
