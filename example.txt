(data List Nil (Cons Int List))

(: f (-> Int Int))
(def (f x) (+ x x))

(: g (-> Int Int))
(def (g x) (+ (f x) 360))

(: len (-> List Int))
(def (len l)
  (case l
    (Nil 0)
    ((Cons h t) (+ 1 (len t)))))

(: concat (-> List List List))
(def (concat l1 l2)
  (case l1
    (Nil l2)
    ((Cons h1 t1) (Cons h1 (concat t1 l2)))))

(: main Int)
(def main (g (f (len (Cons 1 (Cons 2 Nil))))))
